html
  head
    title Chapter 3
    include ../shared/header.pug
  body
    .app
      include ../shared/navbar.pug
      .container
        .stack.stack--lg
          header.stack.stack--sm
            h1.heading.heading--1 Chapter 3 - Functions
            ul.line
              li 
                a(href="#minimum") Minimum
              li 
                a(href="#recursion") Recursion
          section#minimum.stack.stack--sm
            h2.heading.heading--2 Minimum
            p The previous chapter introduced the standard function Math.min that returns its smallest argument. We can build something like that now. Write a function min that takes two arguments and returns their minimum.
            .form-group
              label First element: 
              input#first(type="number")
            .form-group
              label Second element: 
              input#second(type="number")
            footer
              p
                strong Result: 
                span#result 0
            details
              summary Solution
              pre
                | const min = function (a, b) {
                |   const first = Number(a || 0);
                |   const second = Number(b || 0);
                | 
                |   if (first > second) return second;
                |   return first;
                | }
          section#recursion.stack.stack--sm
            h2.heading.heading--2 Recursion 
            p We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:
            ul
              li Zero is even.
              li One is odd.
              li For any other number N, its evenness is the same as N - 2.
            p Define a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.
            p Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?
            .form-group
              label Value: 
              input#recursion-input(type="number")
            footer
              p
                strong Result: 
                span#recursion-result Input any number above.
            details
              summary Solution
              pre
                | const isEven = function (value) {
                |   const absoluteValue = Math.abs(value);
                |   
                |   if (absoluteValue === 0) return true;
                |   if (absoluteValue === 1) return false;
                |   
                |   return isEven(absoluteValue - 2);
                | }
          section#bean.stack.stack--sm
            h2.heading.heading--2 Bean Counting
            p You can get the Nth character, or letter, from a string by writing "string"[N]. The returned value will be a string containing only one character (for example, "b"). The first character has position 0, which causes the last one to be found at position string.length - 1. In other words, a two-character string has length 2, and its characters have positions 0 and 1.
            p Write a function countBs that takes a string as its only argument and returns a number that indicates how many uppercase “B” characters there are in the string.
            p Next, write a function called countChar that behaves like countBs, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase “B” characters). Rewrite countBs to make use of this new function.
            h3.heading.heading--3 Count Bs
            .form-group
              label Your text here:  
              input#bean-input-1
            footer
              p
                strong Result: 
                span#bean-result-1 Input any text above.
            h3.heading.heading--3 Count any character
            .form-group
              label Set a character
              input#bean-input-2(maxlength="1")
            .form-group
              label Your text here: 
              input#bean-input-3
            footer
              p
                strong Result: 
                span#bean-result-2 Set a letter and some text above.
            details
              summary Solution
              pre
                | const charCounter = function (char) {
                |   return (text) => {
                |     let count = 0;
                |     for (index in text) {
                |       if (text[index] === char) count++;
                |     }
                |     return count;
                |   }
                | }
                | const countBs = charCounter('B');
                | const countChar = charCounter(char);

script(type='text/javascript', src='/static/chapter-3.js')  
      